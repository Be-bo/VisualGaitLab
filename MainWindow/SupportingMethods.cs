using MediaToolkit;
using MediaToolkit.Model;
using MediaToolkit.Options;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using VisualGaitLab.SupportingClasses;

namespace VisualGaitLab {
    public partial class MainWindow : Window {

        public void LoadingClosed(object sender, System.EventArgs e) {
            MurderPython();
            EnableInteraction();
        }

        public static void MurderPython() // brutally!
        {
            var procs = Process.GetProcesses().Where(pr => pr.ProcessName.Contains("python"));
            foreach (var process in procs) {
                try {
                    process.Kill();
                }
                catch (Exception e) {
                    Console.WriteLine("Error killing Python: " + e);
                }

            }
        }
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e) {
            MurderPython();
        }

        public static void RenewScript(string fullFileName, List<string> originalScript) { //renew (i.e. create a py file containing specific lines from "PythonScripts" object) the script passed in as param

            if (File.Exists(fullFileName)) {
                String[] rows;
                using (StreamReader sr = new StreamReader(fullFileName)) {
                    rows = Regex.Split(sr.ReadToEnd(), "\r\n");
                }

                using (StreamWriter sw = new StreamWriter(fullFileName)) {
                    for (int i = 0; i < rows.Length; i++) {
                        sw.WriteLine("");
                    }
                }
            }

            using (StreamWriter sw1 = new StreamWriter(fullFileName)) {
                for (int i = 0; i < originalScript.Count; i++) {
                    sw1.WriteLine(originalScript[i]);
                }
            }
        }

        public static void ReplaceStringInFile(String filename, String search, String replace) { //replace string in a text file
            StreamReader sr = new StreamReader(filename);
            String[] rows = Regex.Split(sr.ReadToEnd(), "\r\n");
            sr.Close();

            StreamWriter sw = new StreamWriter(filename);
            for (int i = 0; i < rows.Length; i++) {
                if (rows[i].Contains(search)) {
                    rows[i] = rows[i].Replace(search, replace);
                }
                sw.WriteLine(rows[i]);
            }
            sw.Close();
        }

        public static bool IsFileReady(string filename) { //if the file can be opened for exclusive access it means that the file is no longer locked by another process
            try {
                using (FileStream inputStream = File.Open(filename, FileMode.Open, FileAccess.Read, FileShare.None))
                    return inputStream.Length > 0;
            }
            catch (Exception) {
                return false;
            }
        }

        public static void WaitForFile(string filename) { //this will lock the execution until the file is ready
            while (!IsFileReady(filename)) { }
        }

        public static void CreateThumbnailForVideo(String vidPath, String targetPath) {
            using (var engine = new Engine()) {
                var vid = new MediaFile { Filename = vidPath };
                var options = new ConversionOptions { Seek = TimeSpan.FromSeconds(0) };
                var outputFile = new MediaFile { Filename = string.Format(targetPath) };
                engine.GetThumbnail(vid, outputFile, options);
            }
        }

        public static void GetEvalResultsSaveTime(ref Project proj) { //right after training we get the .csv evaluation results file generated by DLC and save our StopWatch time to it of how long it took to train
            if (proj != null) {
                string evalFolder = proj.ConfigPath.Substring(0, proj.ConfigPath.LastIndexOf("\\")) + "\\evaluation-results\\iteration-0";
                string evalFile = "";
                if (Directory.Exists(evalFolder)) {
                    var folders = Directory.EnumerateDirectories(evalFolder);
                    foreach (var folder in folders) { //only one folder, just grab it
                        var files = Directory.EnumerateFiles(folder);
                        foreach (var file in files) {
                            if (file.Contains(".csv")) { //the only distinguishing characteristic is that it's a csv file
                                evalFile = file;
                                break;
                            }
                        }
                        break;
                    }
                    if (!evalFile.Equals("")) {
                        StreamReader sr = new StreamReader(evalFile);
                        String[] rows = Regex.Split(sr.ReadToEnd(), "\r\n");
                        sr.Close();
                        rows[0] = rows[0] + ",Train Time"; //append current train time to the file lines
                        rows[1] = rows[1] + "," + proj.TrainTime;
                        string[] secondRow = rows[1].Split(','); //second row contains actual nums, so we split using comma
                        if (secondRow.Length >= 7) {
                            proj.TrainError = secondRow[4];
                            proj.TestError = secondRow[5];
                            proj.PCutoff = secondRow[6];
                        }

                        StreamWriter sw = new StreamWriter(evalFile);
                        for (int i = 0; i < rows.Length; i++) { //and we just write all the lines back into the file like a good boi
                            sw.WriteLine(rows[i]);
                        }
                        sw.Close();
                    }
                }
            }
        }

        public static void GetAllEvalResults(ref Project proj) { //just read the evaluation .csv file
            if (proj != null) {
                string evalFolder = proj.ConfigPath.Substring(0, proj.ConfigPath.LastIndexOf("\\")) + "\\evaluation-results\\iteration-0";
                string evalFile = "";
                if (Directory.Exists(evalFolder)) {
                    var folders = Directory.EnumerateDirectories(evalFolder);
                    foreach (var folder in folders) { //only one folder, just grab it
                        var files = Directory.EnumerateFiles(folder);
                        foreach (var file in files) {
                            if (file.Contains(".csv")) { //the only distinguishing characteristic is that it's a csv file
                                evalFile = file;
                                break;
                            }
                        }
                        break;
                    }
                    if (!evalFile.Equals("")) {
                        StreamReader sr = new StreamReader(evalFile);
                        String[] rows = Regex.Split(sr.ReadToEnd(), "\r\n");
                        sr.Close();
                        rows[0] = rows[0] + ",Train Time"; //append current train time to the file lines
                        rows[1] = rows[1] + "," + proj.TrainTime;
                        string[] secondRow = rows[1].Split(','); //second row contains actual nums, so we split using comma
                        if (secondRow.Length >= 10) {
                            proj.TrainError = secondRow[4];
                            proj.TestError = secondRow[5];
                            proj.PCutoff = secondRow[6];
                            proj.TrainTime = secondRow[9];
                        }
                    }
                }
            }
        }

        public static void RecursiveDelete(DirectoryInfo baseDir) {
            if (!baseDir.Exists)
                return;

            foreach (var dir in baseDir.EnumerateDirectories()) {
                RecursiveDelete(dir);
            }
            File.SetAttributes(baseDir.FullName, FileAttributes.Normal);
            baseDir.Delete(true);
        }
    }
}
